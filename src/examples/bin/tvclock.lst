
C:\Users\[Your_Path]\elfos>C:\Users\[Your_Path]\rcasm\rcasm.exe -h -l -v -x -dC:\Users\[Your_Path]\rcasm\1802 C:\Users\[Your_Path]\elfos\tvclock 
1802 -> Native
2 Classes read.
231 Patterns read.
    1 0000:             ;  -------------------------------------------------------------------
    2 0000:             ; *** TV Clock based on code written by Tom Pittman
    3 0000:             ; *** Published in A Short Course in Programming by Tom Pittman
    4 0000:             ; *** Copyright 1979 Netronics Research & Development Ltd.
    5 0000:             ;  -------------------------------------------------------------------
    6 0000:             ; *** Modified to run under the Elf/OS with Pico/Elf Pixie Video
    7 0000:             ; *** Copyright 2021 by Gaston Williams
    8 0000:             ; *** Based on software written by Michael H Riley
    9 0000:             ; *** Thanks to the author for making this code available.
   10 0000:             ; *** Original author copyright notice:
   11 0000:             ; *******************************************************************
   12 0000:             ; *** This software is copyright 2004 by Michael H Riley          ***
   13 0000:             ; *** You have permission to use, modify, copy, and distribute    ***
   14 0000:             ; *** this software so long as this copyright notice is retained. ***
   15 0000:             ; *** This software may not be used in commercial applications    ***
   16 0000:             ; *** without express written permission from the author.         ***
   17 0000:             ; *******************************************************************
   18 0000:
   19 0000:             ; Uncomment the line below to assemble a ROM program
   20 0000:             ; Comment out to assemble a stand alone program
   21 0000:             ;#DEFINE _ROM_ 1
   22 0000:
   23 0000:             include    bios.inc
   24 0000:             ; *******************************************************************
   25 0000:             ; *** This software is copyright 2006 by Michael H Riley          ***
   26 0000:             ; *** You have permission to use, modify, copy, and distribute    ***
   27 0000:             ; *** this software so long as this copyright notice is retained. ***
   28 0000:             ; *** This software may not be used in commercial applications    ***
   29 0000:             ; *** without express written permission from the author.         ***
   30 0000:             ; *******************************************************************
   31 0000:
            #endif
   35 0000:
   36 0000:             ; Define address for standard BIOS vectors
            #endif
   40 0000:
   41 0000:             ; Define address for extended BIOS vectors
            #endif
   45 0000:
            #ifndef _TASM_
   47 0000:             scall:      equ  r4                    ; register for SCALL
   48 0000:             sret:       equ  r5                    ; register for SRET
   49 0000:
   50 0000:             call:       equ  0ffe0h                ; depricated
   51 0000:             ret:        equ  0fff1h                ; depricated
            #endif
   53 0000:
   54 0000:             f_boot:     equ  (BIOS+00h)            ; boot from ide device
   55 0000:             f_type:     equ  (BIOS+03h)            ; type 1 character to console
   56 0000:             f_read:     equ  (BIOS+06h)            ; read 1 character from console
   57 0000:             f_msg:      equ  (BIOS+09h)            ; type asciiz string to console
   58 0000:             f_typex:    equ  (BIOS+0ch)            ; depricated, just returns now
   59 0000:             f_input:    equ  (BIOS+0fh)            ; read asciiz from console
   60 0000:             f_strcmp:   equ  (BIOS+12h)            ; compare 2 strings
   61 0000:             f_ltrim:    equ  (BIOS+15h)            ; trim leading spaces
   62 0000:             f_strcpy:   equ  (BIOS+18h)            ; copy an asciiz string
   63 0000:             f_memcpy:   equ  (BIOS+1bh)            ; copy memory
   64 0000:             f_wrtsec:   equ  (BIOS+1eh)            ; write floppy sector (depricated)
   65 0000:             f_rdsec:    equ  (BIOS+21h)            ; read floppy sector (depricated)
   66 0000:             f_seek0:    equ  (BIOS+24h)            ; floppy seek to track 0 (depricated)
   67 0000:             f_seek:     equ  (BIOS+27h)            ; floopy track seek (depricated)
   68 0000:             f_drive:    equ  (BIOS+2ah)            ; select floppy drive (depricated)
   69 0000:             f_setbd:    equ  (BIOS+2dh)            ; set console baud rate
   70 0000:             f_mul16:    equ  (BIOS+30h)            ; 16-bit multiply
   71 0000:             f_div16:    equ  (BIOS+33h)            ; 16-bit division
   72 0000:             f_idereset: equ  (BIOS+36h)            ; reset ide device
   73 0000:             f_idewrite: equ  (BIOS+39h)            ; write ide sector
   74 0000:             f_ideread:  equ  (BIOS+3ch)            ; read ide sector
   75 0000:             f_initcall: equ  (BIOS+3fh)            ; initialize R4 and R5
   76 0000:             f_bootide:  equ  (BIOS+42h)            ; boot from ide device
   77 0000:             f_hexin:    equ  (BIOS+45h)            ; convert ascii number to hex
   78 0000:             f_hexout2:  equ  (BIOS+48h)            ; convert hex to 2-digit ascii
   79 0000:             f_hexout4:  equ  (BIOS+4bh)            ; convert hex to 4-digit ascii
   80 0000:             f_tty:      equ  (BIOS+4eh)            ; type character to console
   81 0000:             f_mover:    equ  (BIOS+51h)            ; program relocator
   82 0000:             f_minimon:  equ  (BIOS+54h)            ; mini monitor
   83 0000:             f_freemem:  equ  (BIOS+57h)            ; determine memory size
   84 0000:             F_isnum:    equ  (BIOS+5ah)            ; determine if D is numeric
   85 0000:             f_atoi:     equ  (BIOS+5dh)            ; convert ascii to integer
   86 0000:             f_uintout:  equ  (BIOS+60h)            ; convert unsigned integer to ascii
   87 0000:             f_intout:   equ  (BIOS+63h)            ; convert signed integer to ascii
   88 0000:             f_inmsg:    equ  (BIOS+66h)            ; type in-line message
   89 0000:             f_inputl:   equ  (BIOS+69h)            ; read limited line from console
   90 0000:             f_brktest:  equ  (BIOS+6ch)            ; check for serial break
   91 0000:             f_findtkn:  equ  (BIOS+6fh)            ; find token in a token table
   92 0000:             f_isalpha:  equ  (BIOS+72h)            ; determine if D is alphabetic
   93 0000:             f_ishex:    equ  (BIOS+75h)            ; determine if D is hexadecimal
   94 0000:             f_isalnum:  equ  (BIOS+78h)            ; determine if D is alpha or numeric
   95 0000:             f_idnum:    equ  (BIOS+7bh)            ; determine type of ascii number
   96 0000:             f_isterm:   equ  (BIOS+7eh)            ; determine if D is a termination char
   97 0000:             f_getdev:   equ  (BIOS+81h)            ; get supported devices
   98 0000:
   99 0000:             f_version:  equ  (BIOS+0f9h)           ; 3 bytes holding bios version number
  100 0000:
  101 0000:             ; "Extended" BIOS vectors
  102 0000:
  103 0000:             f_bread     equ  (EBIOS+00h)        ; read from onboard serial port
  104 0000:             f_btype     equ  (EBIOS+03h)        ; write to onboard serial port
  105 0000:             f_btest     equ  (EBIOS+06h)        ; test onboard serial port
  106 0000:             f_utype     equ  (EBIOS+09h)        ; write to disk board UART
  107 0000:             f_uread     equ  (EBIOS+0ch)        ; read from disk board UART
  108 0000:             f_utest     equ  (EBIOS+0fh)        ; test disk board UART
  109 0000:             f_usetbd    equ  (EBIOS+12h)        ; set disk board UART baud rate and format
  110 0000:             f_gettod    equ  (EBIOS+15h)        ; read time of day clock
  111 0000:             f_settod    equ  (EBIOS+18h)        ; set time of day clock
  112 0000:             f_rdnvr     equ  (EBIOS+1bh)        ; read non volatile RAM
  113 0000:             f_wrnvr     equ  (EBIOS+1eh)        ; write non volatile RAM
  114 0000:             f_idesize   equ  (EBIOS+21h)        ; return size of attached IDE drive(s)
  115 0000:             f_ideid     equ  (EBIOS+24h)        ; return device data for IDE drive(s)
  116 0000:             f_tmtoas    equ  (EBIOS+2ah)        ; time to ASCII string
  117 0000:             f_dttoas    equ  (EBIOS+27h)        ; date to ASCII string
  118 0000:             f_rtctest   equ  (EBIOS+2dh)        ; test size and presence of RTC/NVR
  119 0000:             f_astodt    equ  (EBIOS+30h)        ; convert ASCII string to date
  120 0000:             f_astotm    equ  (EBIOS+33h)        ; convert ASCII string to time
  121 0000:
  122 0000:
  123 0000:             include    kernel.inc
  124 0000:             O_CLDBOOT: equ     0300h               ; jump to cold boot routine
  125 0000:             O_WRMBOOT: equ     0303h               ; jump to warm boot routine
  126 0000:             O_OPEN:    equ     0306h               ; open a file
  127 0000:             O_READ:    equ     0309h               ; read from file
  128 0000:             O_WRITE:   equ     030ch               ; write to file
  129 0000:             O_SEEK:    equ     030fh               ; seek to file position
  130 0000:             O_CLOSE:   equ     0312h               ; close file
  131 0000:             O_OPENDIR: equ     0315h               ; open dir as a file
  132 0000:             O_DELETE:  equ     0318h               ; delete a file
  133 0000:             O_RENAME:  equ     031bh               ; rename a file
  134 0000:             O_EXEC:    equ     031eh               ; execute an external program
  135 0000:             O_MKDIR:   equ     0321h               ; make directory
  136 0000:             O_CHDIR:   equ     0324h               ; change directory
  137 0000:             O_RMDIR:   equ     0327h               ; remove directory
  138 0000:             O_RDLUMP:  equ     032Ah               ; read LAT entry
  139 0000:             O_WRLUMP:  equ     032Dh               ; write LAT entry
  140 0000:             O_TYPE:    equ     0330h               ; passthrough for console output
  141 0000:             O_MSG:     equ     0333h               ; passthrough for console output
  142 0000:             O_READKEY: equ     0336h               ; passthrough for console input
  143 0000:             O_INPUT:   equ     0339h               ; passthrough for console input
  144 0000:             O_PRTSTAT: equ     033ch               ; printer status
  145 0000:             O_PRINT:   equ     033fh               ; output to printer
  146 0000:             O_EXECBIN: equ     0342h               ; execute from default directory
  147 0000:             O_SETDEF:  equ     0345h               ; set/get default directory
  148 0000:             O_KINIT:   equ     0348h               ; reserved - do not use!!!
  149 0000:
            #ENDIF
  175 0000:
            #IFNDEF _ROM_
  177 0000:             ; ************************************************************
  178 0000:             ; This block generates the Execution header for a stand-alone
  179 0000:             ; program. It begins 6 bytes before the program start.
  180 0000:             ; ************************************************************
  181 0000:
  182 0000:                 org     02000h-6        ; Header starts at 01ffah
  183 1ffa: 20 00               dw      2000h
  184 1ffc: 00 f8               dw      endrom-2000h
  185 1ffe: 20 00               dw      2000h
            #ENDIF
  187 2000:
  188 2000: 30 06               br      start
  189 2002:             ; **************************************************
  190 2002:             ; *** Build information:                         ***
  191 2002:             ; ***    build date                              ***
  192 2002:             ; ***    build number                            ***
  193 2002:             ; ***    information text string                 ***
  194 2002:             ; **************************************************
  195 2002:             ; Build date format:
  196 2002:             ; 80h+month, day, four digit year
  197 2002:             ; **************************************************
  198 2002:             ; 80h month offset indicates extended
  199 2002:             ; build information, with build number and text.
  200 2002:             ; **************************************************
  201 2002:
  202 2002: 01          date:   db  1      ; January
  203 2003: 13                  db  19     ; Day
  204 2004: 07 e5               dw  2021   ; year
  205 2006:
  206 2006:                     ;
  207 2006:                     ; TV DIGITAL CLOCK
  208 2006:                     ;
  209 2006: 93          start:  ghi r3        ;INITIALIZE R0, R1
  210 2007: b0                  phi r0
  211 2008: b1                  phi r1
  212 2009: f8 1c               ldi low ints  ; .. R1 = INTERRUPT PC
  213 200b: a1                  plo r1
  214 200c: f8 23               ldi 23h       ; x=2, p=3
  215 200e: 52                  str r2        ; r2 is stack ptr in Elf/OS
  216 200f: 70                  ret           ; turn on interrupts
  217 2010: 69          main:   inp 1         ; TURN ON TV
  218 2011: 30 ad               br test       ; check for button press
  219 2013:
  220 2013: 12          done:   inc r2        ;.. ASSUME X=2!
  221 2014: 42                  lda r2        ;.. RESTORE DF
  222 2015: f6                  shr
  223 2016: 42                  lda r2        ;.. RESTORE R7
  224 2017: b7                  phi r7
  225 2018: 42                  lda r2
  226 2019: a7                  plo r7
  227 201a: 42                  lda r2        ;.. NOW D
  228 201b: 70                  ret           ;.. RESTORE X AND P
  229 201c: c4          ints:   nop           ;.. EVEN OUT CYCLES
  230 201d: 22                  dec r2        ;.. PUSH STACK, TO
  231 201e: 78                  sav           ;.. SAVE X AND P (IN T)
  232 201f: 22                  dec r2
  233 2020: 73                  stxd          ;.. SAVE D
  234 2021: 87                  glo  r7       ;.. SAVE R7
  235 2022: 73                  stxd
  236 2023: 97                  ghi r7
  237 2024: 73                  stxd
  238 2025: 7e                  shlc          ;.. SAVE DF
  239 2026: 73                  stxd
  240 2027: f8 c8               ldi low buff  ;.. SET UP R0
  241 2029: 34 29               b1  $         ;.. WAIT FOR DISPLAY
  242 202b: a0          row:    plo r0
  243 202c:                             ;...  DMA HERE
  244 202c: a0                  plo r0        ;.. RESET R0
  245 202d: b7                  phi r7
  246 202e: f8 0b               ldi 0Bh       ;.. (RASTER COUNT - 3)/2
  247 2030:                             ;...  DMA HERE
  248 2030: a7                  plo r7
  249 2031: 97                  ghi r7        ;.. KEEP FIXING R0
  250 2032: a0                  plo r0
  251 2033:                             ;...  DMA HERE
  252 2033: 27          rept:   dec r7        ;.. COUNTER RASTERS
  253 2034: 97                  ghi r7
  254 2035: a0                  plo r0
  255 2036:                             ;...  DMA HERE
  256 2036: a0                  plo r0
  257 2037: 87                  glo r7        ;.. TWO LINES PER LOOP
  258 2038: 3a 33               bnz rept
  259 203a:                              ;...  DMA HERE
  260 203a: 80                  glo r0        ;.. IF LAST TIME,
  261 203b: 3c 2b               bn1 row
  262 203d: a0                  plo r0        ;.. JUST BLANK IT
  263 203e:                             ;...  DMA HERE
  264 203e:                                  ;003D 343C  B1 *-1    .. (3 LINES)
  265 203e: 34 3d               b1  $-1      ;  B1 *-1    .. (3 LINES)
  266 2040:                             ;
  267 2040:                             ; SECONDS CLOCK
  268 2040:                             ;
  269 2040: 90                  ghi r0
  270 2041: b7                  phi r7
  271 2042: f8 c7               ldi low frct    ;.. POINT TO FRAME COUNT
  272 2044: a7                  plo r7          ;.. R7 IS AVAILABLE
  273 2045: 07                  ldn r7
  274 2046: fc 01               adi 01h         ;.. BUMP COUNTER
  275 2048: 57                  str r7
  276 2049: ff 3d               smi 3Dh         ;.. MOD 61
  277 204b: 3b 13               bnf done        ;.. NOT OVER
  278 204d: e7                  sex r7
  279 204e: 73                  stxd            ;.. ROLL OVER
  280 204f: f0                  ldx             ;.. TO SECONDS
  281 2050: fc 03               adi 03h
  282 2052: 57                  str r7
  283 2053: 3b 6a               bnf unit        ;.. GO DISPLAY
  284 2055: f8 e2               ldi 0E2h        ;.. ROLL OVER -30
  285 2057: 73                  stxd
  286 2058: f0                  ldx              ;.. TO TENS
  287 2059: fc 03               adi 03h
  288 205b: 57                  str r7
  289 205c: fc 0c               adi 0Ch         ;.. (OVERFLOW AT 60) ADI 12
  290 205e: 3b 63               bnf tens
  291 2060: f8 e2               ldi 0E2h        ;.. ONE MINUTE! -30
  292 2062: 57                  str r7
  293 2063:                                 ;...    .. COULD DO MINUTES, HOURS...
  294 2063: f8 c8       tens:   ldi low buff    ;.. POINT TO LEFT DIGIT
  295 2065:                                 ;0064 306B  BR UNIT+2
  296 2065: 30 6c               br unit+2
  297 2067: f8 c6               ldi low secs    ;.. (POINT TO COUNTER)
  298 2069: a7                  plo r7
  299 206a: f8 cc       unit:   ldi low brit    ;.. OR RIGHT DIGIT
  300 206c: a0                  plo r0
  301 206d: 47                  lda r7          ;.. POINT TO DIGITS
  302 206e:                                 ;006D FCAC  ADI TABL  .. (TABLE OFFSET)
  303 206e: fc ad               adi low tabl    ;.. (TABLE OFFSET)
  304 2070: a7                  plo r7
  305 2071: 47          down:   lda r7          ;.. GET DOTS
  306 2072: 52                  str r2          ;.. (SAVE)
  307 2073: e2                  sex r2
  308 2074: f0          half:   ldx             ;.. CONVERT A DOT
  309 2075: fe                  shl              ;.. FROM A BIT
  310 2076: 52                  str r2
  311 2077: 75                  sdb             ;.. =00 IF DF=1, =FF IF DF=0
  312 2078: 50                  str r0          ;.. STORE INTO BUFFER
  313 2079: 10                  inc r0
  314 207a: 80                  glo r0
  315 207b: fa 03               ani 03h         ;.. DO THIS 4 TIMES
  316 207d: 3a 74               bnz half        ;.. (9*4 INSTRUCTIONS)
  317 207f: 10                  inc r0
  318 2080: 10                  inc r0
  319 2081: 10                  inc r0
  320 2082: 10                  inc r0
  321 2083: f0                  LDX             ;.. CHECK FOR SECOND 4 BITS
  322 2084: 3a 74               bnz half        ;.. ((36+6)*2)
  323 2086: 80                  glo r0          ;.. REPEAT IF THIS WAS LEFT
  324 2087:                               ;0086 FFF8  SMI BEND
  325 2087: ff f8               smi low bend    ;check for end of buffer
  326 2089: 3b 71               bnf down        ;.. ((84+6)*3)
  327 208b:                               ;008A 3266  BZ UNIT-3 .. ((270+9)*2)
  328 208b: 32 67               bz unit-3       ;.. ((270+9)*2)
  329 208d: 30 13               br done         ;.. MAX TOTAL <600 INSTRUCTIONS
  330 208f:
  331 208f:             ;  DOT TABLE FOR DIGITS
  332 208f: da aa df        db 0DAh, 0AAh, 0DFh   ; 0
  333 2092: d9 dd 8f        db 0D9h, 0DDh, 08Fh   ; 1
  334 2095: 9e db 8f        db 09Eh, 0DBh, 08Fh   ; 2
  335 2098: 9e de 9f        db 09Eh, 0DEh, 09Fh   ; 3
  336 209b: ea a8 ef        db 0EAh, 0A8h, 0EFh   ; 4
  337 209e: 8b 9e 9f        db 08Bh, 09Eh, 09Fh   ; 5
  338 20a1: cb 9a df        db 0CBh, 09Ah, 0DFh   ; 6
  339 20a4: 8e db bf        db 08Eh, 0DBh, 0BFh   ; 7
  340 20a7: da da df        db 0DAh, 0DAh, 0DFh   ; 8
  341 20aa: da ce df        db 0DAh, 0CEh, 0DFh   ; 9
  342 20ad:             tabl:    equ    $
  343 20ad:
  344 20ad: 3f ad       test:   bn4 test      ; wait for button express
  345 20af: 37 af               b4 $          ; wait for button release
  346 20b1: f8 23               ldi 23H       ; value for x=2, p=3
  347 20b3: 52                  str r2        ; store on stack for disable instruction
  348 20b4: 71                  dis           ; x=2, p=3 and disable interrupts
  349 20b5: 61                  out 1         ; turn off Video, increments stack
  350 20b6: 22                  dec 2         ; put stack pointer back to original
  351 20b7: c0 03 03            lbr o_wrmboot ; return to Elf/OS
  352 20ba:
  353 20ba:               org 20c5h                ;.. TIME COUNTERS AND DISPLAY BUFFER
  354 20c5: e2          sten:  db 0E2h  ;.. MUST INITIALIZE
  355 20c6: e2          secs:  db 0E2h  ;.. SECS:  #E2
  356 20c7: 00          frct:  db 00h
  357 20c8:             buff:     equ   $         ;.. EMPTY BUFFER
  358 20c8:
  359 20c8:               org 20cch
  360 20cc:             brit: equ    $
  361 20cc:
  362 20cc:               org 20F8h
  363 20f8:             bend: equ    $
  364 20f8:             endrom:    equ     $               ; End of code

20f8h: BEND             - <   363>    325
20cch: BRIT             - <   360>    299
20c8h: BUFF             - <   357>    240    294
ffe0h: CALL             - <    50>
2002h: DATE             - <   202>
2013h: DONE             - <   220>    277    277    329    329
2071h: DOWN             - <   305>    326    326
20f8h: ENDROM           - <   364>    184
20c7h: FRCT             - <   356>    271
f830h: F_ASTODT         - <   119>
f833h: F_ASTOTM         - <   120>
ff5dh: F_ATOI           - <    85>
ff00h: F_BOOT           - <    54>
ff42h: F_BOOTIDE        - <    76>
f800h: F_BREAD          - <   103>
ff6ch: F_BRKTEST        - <    90>
f806h: F_BTEST          - <   105>
f803h: F_BTYPE          - <   104>
ff33h: F_DIV16          - <    71>
ff2ah: F_DRIVE          - <    68>
f827h: F_DTTOAS         - <   117>
ff6fh: F_FINDTKN        - <    91>
ff57h: F_FREEMEM        - <    83>
ff81h: F_GETDEV         - <    97>
f815h: F_GETTOD         - <   110>
ff45h: F_HEXIN          - <    77>
ff48h: F_HEXOUT2        - <    78>
ff4bh: F_HEXOUT4        - <    79>
f824h: F_IDEID          - <   115>
ff3ch: F_IDEREAD        - <    74>
ff36h: F_IDERESET       - <    72>
f821h: F_IDESIZE        - <   114>
ff39h: F_IDEWRITE       - <    73>
ff7bh: F_IDNUM          - <    95>
ff3fh: F_INITCALL       - <    75>
ff66h: F_INMSG          - <    88>
ff0fh: F_INPUT          - <    59>
ff69h: F_INPUTL         - <    89>
ff63h: F_INTOUT         - <    87>
ff78h: F_ISALNUM        - <    94>
ff72h: F_ISALPHA        - <    92>
ff75h: F_ISHEX          - <    93>
ff5ah: F_ISNUM          - <    84>
ff7eh: F_ISTERM         - <    96>
ff15h: F_LTRIM          - <    61>
ff1bh: F_MEMCPY         - <    63>
ff54h: F_MINIMON        - <    82>
ff51h: F_MOVER          - <    81>
ff09h: F_MSG            - <    57>
ff30h: F_MUL16          - <    70>
f81bh: F_RDNVR          - <   112>
ff21h: F_RDSEC          - <    65>
ff06h: F_READ           - <    56>
f82dh: F_RTCTEST        - <   118>
ff27h: F_SEEK           - <    67>
ff24h: F_SEEK0          - <    66>
ff2dh: F_SETBD          - <    69>
f818h: F_SETTOD         - <   111>
ff12h: F_STRCMP         - <    60>
ff18h: F_STRCPY         - <    62>
f82ah: F_TMTOAS         - <   116>
ff4eh: F_TTY            - <    80>
ff03h: F_TYPE           - <    55>
ff0ch: F_TYPEX          - <    58>
ff60h: F_UINTOUT        - <    86>
f80ch: F_UREAD          - <   107>
f812h: F_USETBD         - <   109>
f80fh: F_UTEST          - <   108>
f809h: F_UTYPE          - <   106>
fff9h: F_VERSION        - <    99>
f81eh: F_WRNVR          - <   113>
ff1eh: F_WRTSEC         - <    64>
2074h: HALF             - <   308>    316    316    322    322
201ch: INTS             - <   229>    212
2010h: MAIN             - <   217>
0324h: O_CHDIR          - <   136>
0300h: O_CLDBOOT        - <   124>
0312h: O_CLOSE          - <   130>
0318h: O_DELETE         - <   132>
031eh: O_EXEC           - <   134>
0342h: O_EXECBIN        - <   146>
0339h: O_INPUT          - <   143>
0348h: O_KINIT          - <   148>
0321h: O_MKDIR          - <   135>
0333h: O_MSG            - <   141>
0306h: O_OPEN           - <   126>
0315h: O_OPENDIR        - <   131>
033fh: O_PRINT          - <   145>
033ch: O_PRTSTAT        - <   144>
032ah: O_RDLUMP         - <   138>
0309h: O_READ           - <   127>
0336h: O_READKEY        - <   142>
031bh: O_RENAME         - <   133>
0327h: O_RMDIR          - <   137>
030fh: O_SEEK           - <   129>
0345h: O_SETDEF         - <   147>
0330h: O_TYPE           - <   140>
030ch: O_WRITE          - <   128>
032dh: O_WRLUMP         - <   139>
0303h: O_WRMBOOT        - <   125>    351    351
2033h: REPT             - <   252>    258    258
fff1h: RET              - <    51>
202bh: ROW              - <   242>    261
0004h: SCALL            - <    47>
20c6h: SECS             - <   355>    297
0005h: SRET             - <    48>
2006h: START            - <   209>    188    188
20c5h: STEN             - <   354>
20adh: TABL             - <   342>    303
2063h: TENS             - <   294>    290    290
20adh: TEST             - <   344>    218    218    344    344
206ah: UNIT             - <   299>    283    283    296    296    328    328

364 Lines assembled
0 Errors
112 Labels
Object Code:195 bytes

